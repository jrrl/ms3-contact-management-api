# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
jobs:
  test:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:11-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb

    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/build.gradle.kts" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: |
          cd app
          gradle dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "app/build.gradle.kts" }}
      # run tests!
      - run: |
          cd app
          gradle test
  build-image:
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/build.gradle.kts" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: |
          cd app
          gradle dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "app/build.gradle.kts" }}
      - run: |
          cd app
          git config --global user.email "rafaelliban@gmail.com"
          git config --global user.name "Janjan Liban"
          gradle release -Drelease.useAutomaticVersion=true
      - run: |
          docker login https://docker.pkg.github.com -u jrrl -p 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
          TAG=$(git describe --abbrev=0 --tags)
          cd app
          gradle jib -Djib.to.tags=$TAG,latest -Djib.to.image=docker.pkg.github.com/jrrl/ms3-contact-management-api/ms3-contact-api
  google-login:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/repo
    steps:
      - checkout
      - run: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          gcloud --quiet config set project ${GOOGLE_PROJECT_ID}
          gcloud --quiet config set compute/zone ${GOOGLE_COMPUTE_ZONE}
  build-to-google:
    docker:
      - image: circleci/openjdk:11-jdk
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "app/build.gradle.kts" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-
      - run: |
          cd app
          gradle dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "app/build.gradle.kts" }}
      - run: |
          cd app
          git config --global user.email "rafaelliban@gmail.com"
          git config --global user.name "Janjan Liban"
          gradle release -Drelease.useAutomaticVersion=true
      - run: |
          cd app
          TAG=$(git describe --abbrev=0 --tags)
          gradle jibDockerBuild -Djib.to.tags=$TAG,latest
          docker image save gcr.io/ms3-contact-api/ms3-contact-api:$TAG -o images/image.tar
      - persist_to_workspace:
          root: ./images
          paths:
            - image.tar

  deploy-to-google:
    docker:
      - image: google/cloud-sdk
    working_directory: ~/repo
    steps:
      - checkout
      - attach_workspace:
          at: images
      - run: |
          echo $GCLOUD_SERVICE_KEY | gcloud auth activate-service-account --key-file=-
          TAG=$(git describe --abbrev=0 --tags)
          docker load --input images/image.tar
          docker push gcr.io/ms3-contact-api/ms3-contact-api:$TAG
          gcloud run deploy ms3-contact-api --image gcr.io/ms3-contact-api/ms3-contact-api:$TAG

workflows:
  version: 2
  build-and-test:
    jobs:
      - test
#      - build-image:
#          filters:
#            branches:
#              only: master
      - build-to-google:
          filters:
            branches:
              only: master
          requires:
            - test
      - deploy-to-google:
          filters:
            branches:
              only: master
          requires:
            - build-to-google

